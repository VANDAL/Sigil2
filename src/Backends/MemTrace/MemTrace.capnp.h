// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: MemTrace.capnp

#ifndef CAPNP_INCLUDED_c8b46734edf9fd25_
#define CAPNP_INCLUDED_c8b46734edf9fd25_

#include <capnp/generated-header-support.h>

#if CAPNP_VERSION != 5003
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(e99acfd22115f001);
CAPNP_DECLARE_SCHEMA(8946dd7e2b1211c3);
CAPNP_DECLARE_SCHEMA(dfd814b46119e9fe);
enum class MemType_dfd814b46119e9fe: uint16_t {
  NONE,
  READ,
  WRITE,
};
CAPNP_DECLARE_ENUM(MemType, dfd814b46119e9fe);

}  // namespace schemas
}  // namespace capnp


struct MemTraceStream {
  MemTraceStream() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Mem;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e99acfd22115f001, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

struct MemTraceStream::Mem {
  Mem() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::MemType_dfd814b46119e9fe MemType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8946dd7e2b1211c3, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand = &schema->defaultBrand;
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class MemTraceStream::Reader {
public:
  typedef MemTraceStream Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline bool hasEvents() const;
  inline  ::capnp::List< ::MemTraceStream::Mem>::Reader getEvents() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemTraceStream::Builder {
public:
  typedef MemTraceStream Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasEvents();
  inline  ::capnp::List< ::MemTraceStream::Mem>::Builder getEvents();
  inline void setEvents( ::capnp::List< ::MemTraceStream::Mem>::Reader value);
  inline  ::capnp::List< ::MemTraceStream::Mem>::Builder initEvents(unsigned int size);
  inline void adoptEvents(::capnp::Orphan< ::capnp::List< ::MemTraceStream::Mem>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::MemTraceStream::Mem>> disownEvents();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemTraceStream::Pipeline {
public:
  typedef MemTraceStream Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MemTraceStream::Mem::Reader {
public:
  typedef Mem Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand);
  }
#endif  // !CAPNP_LITE

  inline  ::MemTraceStream::Mem::MemType getType() const;

  inline  ::uint8_t getSize() const;

  inline  ::uint64_t getAddr() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MemTraceStream::Mem::Builder {
public:
  typedef Mem Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::MemTraceStream::Mem::MemType getType();
  inline void setType( ::MemTraceStream::Mem::MemType value);

  inline  ::uint8_t getSize();
  inline void setSize( ::uint8_t value);

  inline  ::uint64_t getAddr();
  inline void setAddr( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MemTraceStream::Mem::Pipeline {
public:
  typedef Mem Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool MemTraceStream::Reader::hasEvents() const {
  return !_reader.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline bool MemTraceStream::Builder::hasEvents() {
  return !_builder.getPointerField(0 * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::MemTraceStream::Mem>::Reader MemTraceStream::Reader::getEvents() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::get(
      _reader.getPointerField(0 * ::capnp::POINTERS));
}
inline  ::capnp::List< ::MemTraceStream::Mem>::Builder MemTraceStream::Builder::getEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::get(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}
inline void MemTraceStream::Builder::setEvents( ::capnp::List< ::MemTraceStream::Mem>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::set(
      _builder.getPointerField(0 * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::MemTraceStream::Mem>::Builder MemTraceStream::Builder::initEvents(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::init(
      _builder.getPointerField(0 * ::capnp::POINTERS), size);
}
inline void MemTraceStream::Builder::adoptEvents(
    ::capnp::Orphan< ::capnp::List< ::MemTraceStream::Mem>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::adopt(
      _builder.getPointerField(0 * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::MemTraceStream::Mem>> MemTraceStream::Builder::disownEvents() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::MemTraceStream::Mem>>::disown(
      _builder.getPointerField(0 * ::capnp::POINTERS));
}

inline  ::MemTraceStream::Mem::MemType MemTraceStream::Mem::Reader::getType() const {
  return _reader.getDataField< ::MemTraceStream::Mem::MemType>(
      0 * ::capnp::ELEMENTS);
}

inline  ::MemTraceStream::Mem::MemType MemTraceStream::Mem::Builder::getType() {
  return _builder.getDataField< ::MemTraceStream::Mem::MemType>(
      0 * ::capnp::ELEMENTS);
}
inline void MemTraceStream::Mem::Builder::setType( ::MemTraceStream::Mem::MemType value) {
  _builder.setDataField< ::MemTraceStream::Mem::MemType>(
      0 * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t MemTraceStream::Mem::Reader::getSize() const {
  return _reader.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}

inline  ::uint8_t MemTraceStream::Mem::Builder::getSize() {
  return _builder.getDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS);
}
inline void MemTraceStream::Mem::Builder::setSize( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      2 * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t MemTraceStream::Mem::Reader::getAddr() const {
  return _reader.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}

inline  ::uint64_t MemTraceStream::Mem::Builder::getAddr() {
  return _builder.getDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS);
}
inline void MemTraceStream::Mem::Builder::setAddr( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      1 * ::capnp::ELEMENTS, value);
}


#endif  // CAPNP_INCLUDED_c8b46734edf9fd25_
